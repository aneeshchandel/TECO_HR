labels=c("1" = "NEE", "2" = "GPP", "3" = "Reco", "4" = "Forage"))+
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.title = element_text(size = 30),
plot.margin = margin(1, 3, 1, 3, "cm"),
axis.title.y.right = element_text(color = "steelblue", vjust = 2),
axis.title.y.left = element_text(vjust = 2),
legend.title = element_text(size = 20),
legend.text = element_text(size = 20)) +
scale_y_continuous(name = "Simulation difference between \n with and without HR (g/m²/day)") +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
labs(color = "") +
theme_bw() +labs(color = "", x = "")+
geom_hline(yintercept = 0, linetype = "dashed", color = "black")+     # Add a horizontal line at y = 0
theme(axis.text.x = element_text(size = 20),  # Increase size of x-axis text
axis.text.y = element_text(size = 40),   # Increase size of y-axis text
axis.title = element_text(size = 30),  # Increase size of axis titles
plot.margin = margin(1, 3, 1, 3, "cm"),
axis.title.y.right = element_text(color = "black", vjust = 2),
axis.title.y.left = element_text(vjust = 2),
legend.position = "top",
legend.title = element_text(size = 30),
legend.text = element_text(size = 30))
plot1 <- ggplot(data = c_flux_simulation) +
geom_point(aes(x = date, y = NEE, color = "NEE"), size = 1) +
#geom_line(aes(x = date, y = GPP, color = "GPP"), size = 1) +
#geom_line(aes(x = date, y = Reco, color = "Reco"), size = 1) +
#geom_line(aes(x = date, y = Foliage, color = "Foliage"), size = 1) +
geom_line(data = simulation, aes(x = date, y = swc_1/8), color="blue") +
geom_line(data = simulation, aes(x = date, y = swc_2/8), color="orange") +
geom_line(data = simulation, aes(x = date, y = swc_3/8), color="darkgreen") +
geom_line(data = simulation, aes(x = date, y = swc_4/8), color="red") +
scale_y_continuous(name = "C flux simulation difference between \n with and without HR (g/m²/day)", sec.axis = sec_axis(~.*8,
name = "Hydraulic redistribution (mm/day)",
breaks = seq(-0.5, 1, by = 0.3))) +
scale_color_manual(values = c("NEE" = "darkgrey", "GPP" = "darkgrey", "Reco" = "darkgrey", "Foliage" = "darkgrey")) +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
labs(color = "", x = "") +
theme_bw() +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +     # Add a horizontal line at y = 0
theme(axis.text.x = element_text(size = 20),  # Increase size of x-axis text
axis.text.y = element_text(size = 40),   # Increase size of y-axis text
axis.title = element_text(size = 30),  # Increase size of axis titles
plot.margin = margin(1, 3, 1, 3, "cm"),
axis.title.y.right = element_text(color = "black", vjust = 2),
axis.title.y.left = element_text(vjust = 2),
legend.position = "top",
legend.title = element_text(size = 30),
legend.text = element_text(size = 30))+
coord_cartesian(ylim = c(-0.05, 0.25))
plot2 <-ggplot(data = c_flux_simulation) +
#geom_line(aes(x = date, y = NEE, color = "NEE"), size = 1) +
geom_line(aes(x = date, y = GPP, color = "GPP"), size = 1) +
#geom_line(aes(x = date, y = Reco, color = "Reco"), size = 1) +
#geom_line(aes(x = date, y = Foliage, color = "Foliage"), size = 1) +
geom_line(data = simulation, aes(x = date, y = swc_1/8), color="blue") +
geom_line(data = simulation, aes(x = date, y = swc_2/8), color="orange") +
geom_line(data = simulation, aes(x = date, y = swc_3/8), color="darkgreen") +
geom_line(data = simulation, aes(x = date, y = swc_4/8), color="red") +
scale_y_continuous(name = "C flux simulation difference between \n with and without HR (g/m²/day)", sec.axis = sec_axis(~.*8,
name = "Hydraulic redistribution (mm/day)",
breaks = seq(-0.5, 1, by = 0.3))) +
scale_color_manual(values = c("NEE" = "darkgrey", "GPP" = "darkgrey", "Reco" = "darkgrey", "Foliage" = "darkgrey")) +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
labs(color = "", x = "") +
theme_bw() +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +     # Add a horizontal line at y = 0
theme(axis.text.x = element_text(size = 20),  # Increase size of x-axis text
axis.text.y = element_text(size = 40),   # Increase size of y-axis text
axis.title = element_text(size = 30),  # Increase size of axis titles
plot.margin = margin(1, 3, 1, 3, "cm"),
axis.title.y.right = element_text(color = "black", vjust = 2),
axis.title.y.left = element_text(vjust = 2),
legend.position = "top",
legend.title = element_text(size = 30),
legend.text = element_text(size = 30))+
coord_cartesian(ylim = c(-0.05, 0.25))
plot3 <-ggplot(data = c_flux_simulation) +
#geom_line(aes(x = date, y = NEE, color = "NEE"), size = 1) +
#geom_line(aes(x = date, y = GPP, color = "GPP"), size = 1) +
geom_point(aes(x = date, y = Reco, color = "Reco"), size = 1) +
#geom_line(aes(x = date, y = Foliage, color = "Foliage"), size = 1) +
geom_line(data = simulation, aes(x = date, y = swc_1/8), color="blue") +
geom_line(data = simulation, aes(x = date, y = swc_2/8), color="orange") +
geom_line(data = simulation, aes(x = date, y = swc_3/8), color="darkgreen") +
geom_line(data = simulation, aes(x = date, y = swc_4/8), color="red") +
scale_y_continuous(name = "C flux simulation difference between \n with and without HR (g/m²/day)", sec.axis = sec_axis(~.*8,
name = "Hydraulic redistribution (mm/day)",
breaks = seq(-0.5, 1, by = 0.3)))  +
scale_color_manual(values = c("NEE" = "darkgrey", "GPP" = "darkgrey", "Reco" = "darkgrey", "Foliage" = "darkgrey")) +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
labs(color = "", x = "") +
theme_bw() +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +     # Add a horizontal line at y = 0
theme(axis.text.x = element_text(size = 20),  # Increase size of x-axis text
axis.text.y = element_text(size = 40),   # Increase size of y-axis text
axis.title = element_text(size = 30),  # Increase size of axis titles
plot.margin = margin(1, 3, 1, 3, "cm"),
axis.title.y.right = element_text(color = "black", vjust = 2),
axis.title.y.left = element_text(vjust = 2),
legend.position = "top",
legend.title = element_text(size = 30),
legend.text = element_text(size = 30))+
coord_cartesian(ylim = c(-0.05, 0.25))
plot4 <-ggplot(data = c_flux_simulation) +
#geom_line(aes(x = date, y = NEE, color = "NEE"), size = 1) +
#geom_line(aes(x = date, y = GPP, color = "GPP"), size = 1) +
#geom_line(aes(x = date, y = Reco, color = "Reco"), size = 1) +
geom_line(aes(x = date, y = Foliage, color = "Foliage"), size = 1) +
geom_line(data = simulation, aes(x = date, y = swc_1/8), color="blue") +
geom_line(data = simulation, aes(x = date, y = swc_2/8), color="orange") +
geom_line(data = simulation, aes(x = date, y = swc_3/8), color="darkgreen") +
geom_line(data = simulation, aes(x = date, y = swc_4/8), color="red") +
scale_y_continuous(name = "C flux simulation difference between \n with and without HR (g/m²/day)", sec.axis = sec_axis(~.*8,
name = "Hydraulic redistribution (mm/day)",
breaks = seq(-0.5, 1, by = 0.3))) +
scale_color_manual(values = c("NEE" = "darkgrey", "GPP" = "darkgrey", "Reco" = "darkgrey", "Foliage" = "darkgrey")) +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
labs(color = "", x = "") +
theme_bw() +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +     # Add a horizontal line at y = 0
theme(axis.text.x = element_text(size = 20),  # Increase size of x-axis text
axis.text.y = element_text(size = 40),   # Increase size of y-axis text
axis.title = element_text(size = 30),  # Increase size of axis titles
plot.margin = margin(1, 3, 1, 3, "cm"),
axis.title.y.right = element_text(color = "black", vjust = 2),
axis.title.y.left = element_text(vjust = 2),
legend.position = "top",
legend.title = element_text(size = 30),
legend.text = element_text(size = 30))+
coord_cartesian(ylim = c(-0.05, 0.65))
(plot1 | plot2) / (plot3 | plot4)
##########################################################################################
######################### HR vs precipitation graph ################
ggplot() +
#geom_line(aes(x = date, y = NEE, color = "NEE"), size = 1) +
#geom_line(aes(x = date, y = GPP, color = "GPP"), size = 1) +
#geom_line(aes(x = date, y = Reco, color = "Reco"), size = 1) +
geom_line(data = simulation, aes(x = date, y = swc_1,color="1"), size = 1.5) +
geom_line(data = simulation, aes(x = date, y = swc_2,color="2"), size = 1.5) +
geom_line(data = simulation, aes(x = date, y = swc_3,color="3"), size = 1.5) +
geom_line(data = simulation, aes(x = date, y = swc_4,color="4"), size = 1.5) +
geom_bar(data = daily_ppt, aes(x = TIMESTAMP, y = ppt_final/100), stat = "identity", color="black")+
scale_y_continuous(name = "Hydraulic redistribution (mm/day)", sec.axis = sec_axis(~.*100, name = "Precipitation (mm)",
breaks = seq(0, 70, by = 10))) +
scale_color_manual(values = c("1" = "blue", "2" = "orange", "3" = "darkgreen", "4" = "red"),
labels=c("1" = "5 cm", "2" = "15 cm", "3" = "30 cm", "4" = "60 cm")) +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
labs(color = "", x = "") +
theme_bw() +
geom_hline(yintercept = 0, linetype = "solid", color = "black") +
geom_hline(yintercept = 0.30, linetype = "dashed", color = "black") +# Add a horizontal line at y = 0
theme(axis.text.x = element_text(size = 30),  # Increase size of x-axis text
axis.text.y = element_text(size = 40),   # Increase size of y-axis text
axis.title = element_text(size = 30),  # Increase size of axis titles
plot.margin = margin(1, 3, 1, 3, "cm"),
axis.title.y.right = element_text(color = "black", vjust = 2),
axis.title.y.left = element_text(vjust = 2),
legend.position = "top",
legend.title = element_text(size = 30),
legend.text = element_text(size = 30))+
coord_cartesian(ylim = c(-0.5, 1))
# setwd("C:/Users/akc76/OneDrive - Cornell University/Desktop/HR/TECO_Dryland_HR/Teco_model_Aneesh/1_Output/withoutHR/Simu")
# x <- read.csv("Simu_swater_flux.txt")
# #
# setwd("C:/Users/akc76/OneDrive - Cornell University/Desktop/HR/TECO_Dryland_HR/Teco_model_Aneesh/1_Output/withHR/Simu")
# y <- read.csv("Simu_swater_flux.txt")
# #
# VWC_withoutHR$vwc_average <- (VWC_withoutHR$swc.1.*5+VWC_withoutHR$swc.2.*10+VWC_withoutHR$swc.3.*15+VWC_withoutHR$swc.4.*30+VWC_withoutHR$swc.5.*20+
#   VWC_withoutHR$swc.6.*20+VWC_withoutHR$swc.1.*20+VWC_withoutHR$swc.1.*20+VWC_withoutHR$swc.1.*20+VWC_withoutHR$swc.1.*20)/(180)
# VWC_withHR$vwc_average <- (VWC_withHR$swc.1.*5+VWC_withHR$swc.2.*10+VWC_withHR$swc.3.*15+VWC_withHR$swc.4.*30+VWC_withHR$swc.5.*20+
#                                 VWC_withHR$swc.6.*20+VWC_withHR$swc.1.*20+VWC_withHR$swc.1.*20+VWC_withHR$swc.1.*20+VWC_withHR$swc.1.*20)/(180)
# #
# VWC_withoutHR$vwc_average <- (VWC_withoutHR$swc.1.*5+VWC_withoutHR$swc.2.*10+VWC_withoutHR$swc.3.*15+VWC_withoutHR$swc.4.*30)/(60)
# VWC_withHR$vwc_average <- (VWC_withHR$swc.1.*5+VWC_withHR$swc.2.*10+VWC_withHR$swc.3.*15+VWC_withHR$swc.4.*30)/(60)
#
#
# hydraulic_red <- as.data.frame(VWC_withoutHR$time)
# hydraulic_red$HR <- (VWC_withHR$vwc_average-VWC_withoutHR$vwc_average)/VWC_withoutHR$vwc_average*100
#
# plot(VWC_withoutHR$time, (VWC_withHR$vwc_average-VWC_withoutHR$vwc_average)/VWC_withoutHR$vwc_average*100, cex.lab=2, cex.axis=2, ylab = "", xlab = "", type="l")
# title(ylab="Difference between with \n and without HR VWC (%)", line=6.2, cex.lab=1.5)
# abline(h = 0, col = "red", lty = 2)
#
#
# plot((VWC_withHR$vwc_average-VWC_withoutHR$vwc_average)/VWC_withoutHR$vwc_average*100, c_flux_simulation$GPP)
# abline(h = 0, col = "red", lty = 2)
# plot((VWC_withHR$vwc_average-VWC_withoutHR$vwc_average)/VWC_withoutHR$vwc_average*100, c_flux_simulation$NEE)
# abline(h = 0, col = "red", lty = 2)
# plot((VWC_withHR$vwc_average-VWC_withoutHR$vwc_average)/VWC_withoutHR$vwc_average*100, c_flux_simulation$Reco)
# abline(h = 0, col = "red", lty = 2)
#
# plot(c_flux_simulation$date, c_flux_simulation$GPP, type="l", cex.lab=2, cex.axis=2, ylab = "", xlab = "", main = "GPP")
# title(ylab=expression('Simulation difference between \n with and without GPP (g/m'^2*')'), line=6.2, cex.lab=1.5)
# abline(h = 0, col = "red", lty = 2)
# lines(VWC_withoutHR$time, (VWC_withHR$vwc_average-VWC_withoutHR$vwc_average))
#
# plot(hydraulic_red$HR/max(abs(hydraulic_red$HR)), c_flux_simulation$NEE/max(abs(c_flux_simulation$NEE)))
# plot(hydraulic_red$HR/max(abs(hydraulic_red$HR)), c_flux_simulation$GPP/max(abs(c_flux_simulation$GPP)))
# plot(hydraulic_red$HR/max(abs(hydraulic_red$HR)), c_flux_simulation$Reco/max(abs(c_flux_simulation$Reco)))
# lm_model <- lm(hydraulic_red$HR~c_flux_d_HR$Reco)
# summary(lm_model)
#
# # Extract R-squared value
#
#
# setwd("C:/Users/akc76/OneDrive - Cornell University/Desktop/HR/Model_data/out_processed_data/Hourly dataset/Scripts")
# # #
# daily_met <- read.csv("daily_met.csv")
# daily_met$TIMESTAMP <- as.Date(daily_met$TIMESTAMP, format = "%d-%b-%Y")
#
# par(mar = c(5, 4, 4, 8))
# # Plot precipitation on the left y-axis
# plot(daily_met$TIMESTAMP, daily_met$ppt_final, type = "h", xlab = "Date", ylab = "Precipitation (mm)", main = "Daily Precipitation")
#
# # Add second y-axis for soil water content
# par(new = TRUE)  # Add the new plot on top of the existing one
# plot(VWC_withoutHR$time, VWC_withoutHR$swc.1., type = "l", col = "blue", xlab = "", ylab = "", main = "", axes = FALSE)
# axis(4, col = "blue", ylim = range(VWC_withoutHR$swc.1.), col.axis = "blue")  # Add the axis on the right side
# mtext("Soil Water Content", side = 4, line = 3, col = "blue", las = 2)  # Add label for the second y-axis
#
# plot(log(-daily_psi_withoutHR$wpotent_1_/100), VWC_withoutHR$swc.1.)
# plot(log(-daily_psi_withoutHR$wpotent_2_/100), VWC_withoutHR$swc.2.)
# plot(log(-daily_psi_withoutHR$wpotent_3_/100), VWC_withoutHR$swc.3.)
# plot(log(-daily_psi_withoutHR$wpotent_4_/100), VWC_withoutHR$swc.4.)
rm(list = ls())
library(ggplot2)
library(Metrics)
library(dplyr)
library(minpack.lm)
library(patchwork)
options(scipen = 10)
###########################################################################################################################
setwd("C:/Users/akc76/OneDrive - Cornell University/Desktop/HR/TECO_Dryland_HR/Teco_model_Aneesh/1_Output/withHR/DA")
paraest <- read.csv("Paraest.csv", skip = 7, header = F)
par(las = 1)
# Plot the probability density line graph with modified x-axis labels and increased axes gradients
par(mar = c(8, 20, 4, 7), mgp = c(3, 3, 0))
par(mfrow=c(1,1))
density_data <- density(paraest$V8)
plot(density_data,
type = "l",        # Specify line type
col = "blue",      # Line color
lwd = 2,           # Line width
xlab = "",    # Label for x-axis
ylab = "",  # Label for y-axis
main = "",
xaxs = "i",        # Set x-axis style to "internal"
yaxs = "i",        # Set y-axis style to "internal"
xlim = c(0, max(density_data$x)),  # Set limits for x-axis
ylim = c(0, max(density_data$y) + 100),  # Set limits for y-axis
xaxt = "n",        # Suppress x-axis tick labels
cex.axis = 5)      # Set size of axes gradients
title(ylab="Probability density", line=14, cex.lab=6)
# Calculate the exponent for x-axis labels
max_x <- max(density_data$x)
max_x_exponent <- floor(log10(max_x))
# Define the x-axis tick positions and labels
ticks <- seq(0, max_x, length.out = 4)
labels <- format(ticks / 10^max_x_exponent, scientific = FALSE, digits = 2)  # Specify digits as 2
# Add custom x-axis tick labels
axis(side = 1, at = ticks, labels = labels, cex.axis = 5)
# Add x-axis label with exponent
mtext(expression('*10'^-4),side = 1,line = 6,at = max(density_data$x),col = "black",cex = 3)
# Add a vertical line at the maximum density value
max_density <- max(density_data$y)  # Get the maximum density value
segments(x0 = density_data$x[density_data$y == max_density], y0 = 0, x1 = density_data$x[density_data$y == max_density], y1 = max_density,lty = 2,col = "blue")
###########################################################################################################################
setwd("C:/Users/akc76/OneDrive - Cornell University/Desktop/HR/TECO_Dryland_HR/Teco_model_Aneesh/1_Output/withHR/DA")
paraest <- read.csv("Paraest.csv", header = F)
#paraest <- read.csv("Paraest.csv", skip = 7, header = F)
par(las = 1)
# Plot the probability density line graph with modified x-axis labels and increased axes gradients
par(mar = c(8, 20, 4, 7), mgp = c(3, 3, 0))
par(mfrow=c(1,1))
density_data <- density(paraest$V8)
plot(density_data,
type = "l",        # Specify line type
col = "blue",      # Line color
lwd = 2,           # Line width
xlab = "",    # Label for x-axis
ylab = "",  # Label for y-axis
main = "",
xaxs = "i",        # Set x-axis style to "internal"
yaxs = "i",        # Set y-axis style to "internal"
xlim = c(0, max(density_data$x)),  # Set limits for x-axis
ylim = c(0, max(density_data$y) + 100),  # Set limits for y-axis
xaxt = "n",        # Suppress x-axis tick labels
cex.axis = 5)      # Set size of axes gradients
title(ylab="Probability density", line=14, cex.lab=6)
# Calculate the exponent for x-axis labels
max_x <- max(density_data$x)
max_x_exponent <- floor(log10(max_x))
View(paraest)
paraest <- read.csv("Paraest.csv", skip = 2, header = F)
par(las = 1)
# Plot the probability density line graph with modified x-axis labels and increased axes gradients
par(mar = c(8, 20, 4, 7), mgp = c(3, 3, 0))
par(mfrow=c(1,1))
density_data <- density(paraest$V8)
plot(density_data,
type = "l",        # Specify line type
col = "blue",      # Line color
lwd = 2,           # Line width
xlab = "",    # Label for x-axis
ylab = "",  # Label for y-axis
main = "",
xaxs = "i",        # Set x-axis style to "internal"
yaxs = "i",        # Set y-axis style to "internal"
xlim = c(0, max(density_data$x)),  # Set limits for x-axis
ylim = c(0, max(density_data$y) + 100),  # Set limits for y-axis
xaxt = "n",        # Suppress x-axis tick labels
cex.axis = 5)      # Set size of axes gradients
title(ylab="Probability density", line=14, cex.lab=6)
# Calculate the exponent for x-axis labels
max_x <- max(density_data$x)
max_x_exponent <- floor(log10(max_x))
# Define the x-axis tick positions and labels
ticks <- seq(0, max_x, length.out = 4)
labels <- format(ticks / 10^max_x_exponent, scientific = FALSE, digits = 2)  # Specify digits as 2
# Add custom x-axis tick labels
axis(side = 1, at = ticks, labels = labels, cex.axis = 5)
# Add x-axis label with exponent
mtext(expression('*10'^-4),side = 1,line = 6,at = max(density_data$x),col = "black",cex = 3)
# Add a vertical line at the maximum density value
max_density <- max(density_data$y)  # Get the maximum density value
segments(x0 = density_data$x[density_data$y == max_density], y0 = 0, x1 = density_data$x[density_data$y == max_density], y1 = max_density,lty = 2,col = "blue")
rm(list = ls())
library(ggplot2)
library(Metrics)
library(dplyr)
library(minpack.lm)
library(patchwork)
options(scipen = 10)
###########################################################################################################################
setwd("C:/Users/akc76/OneDrive - Cornell University/Desktop/HR/TECO_Dryland_HR/Teco_model_Aneesh/1_Output/withHR/DA")
paraest <- read.csv("Paraest.csv", skip = 10, header = F)
par(las = 1)
# Plot the probability density line graph with modified x-axis labels and increased axes gradients
par(mar = c(8, 20, 4, 7), mgp = c(3, 3, 0))
par(mfrow=c(1,1))
density_data <- density(paraest$V8)
plot(density_data,
type = "l",        # Specify line type
col = "blue",      # Line color
lwd = 2,           # Line width
xlab = "",    # Label for x-axis
ylab = "",  # Label for y-axis
main = "",
xaxs = "i",        # Set x-axis style to "internal"
yaxs = "i",        # Set y-axis style to "internal"
xlim = c(0, max(density_data$x)),  # Set limits for x-axis
ylim = c(0, max(density_data$y) + 100),  # Set limits for y-axis
xaxt = "n",        # Suppress x-axis tick labels
cex.axis = 5)      # Set size of axes gradients
title(ylab="Probability density", line=14, cex.lab=6)
# Calculate the exponent for x-axis labels
max_x <- max(density_data$x)
max_x_exponent <- floor(log10(max_x))
# Define the x-axis tick positions and labels
ticks <- seq(0, max_x, length.out = 4)
labels <- format(ticks / 10^max_x_exponent, scientific = FALSE, digits = 2)  # Specify digits as 2
# Add custom x-axis tick labels
axis(side = 1, at = ticks, labels = labels, cex.axis = 5)
# Add x-axis label with exponent
mtext(expression('*10'^-4),side = 1,line = 6,at = max(density_data$x),col = "black",cex = 3)
# Add a vertical line at the maximum density value
max_density <- max(density_data$y)  # Get the maximum density value
segments(x0 = density_data$x[density_data$y == max_density], y0 = 0, x1 = density_data$x[density_data$y == max_density], y1 = max_density,lty = 2,col = "blue")
rm(list = ls())
library(ggplot2)
library(Metrics)
library(dplyr)
library(minpack.lm)
library(patchwork)
options(scipen = 10)
###########################################################################################################################
setwd("C:/Users/akc76/OneDrive - Cornell University/Desktop/HR/TECO_Dryland_HR/Teco_model_Aneesh/1_Output/withHR/DA")
paraest <- read.csv("Paraest.csv", skip = 11, header = F)
par(las = 1)
# Plot the probability density line graph with modified x-axis labels and increased axes gradients
par(mar = c(8, 20, 4, 7), mgp = c(3, 3, 0))
par(mfrow=c(1,1))
density_data <- density(paraest$V8)
plot(density_data,
type = "l",        # Specify line type
col = "blue",      # Line color
lwd = 2,           # Line width
xlab = "",    # Label for x-axis
ylab = "",  # Label for y-axis
main = "",
xaxs = "i",        # Set x-axis style to "internal"
yaxs = "i",        # Set y-axis style to "internal"
xlim = c(0, max(density_data$x)),  # Set limits for x-axis
ylim = c(0, max(density_data$y) + 100),  # Set limits for y-axis
xaxt = "n",        # Suppress x-axis tick labels
cex.axis = 5)      # Set size of axes gradients
title(ylab="Probability density", line=14, cex.lab=6)
# Calculate the exponent for x-axis labels
max_x <- max(density_data$x)
max_x_exponent <- floor(log10(max_x))
# Define the x-axis tick positions and labels
ticks <- seq(0, max_x, length.out = 4)
labels <- format(ticks / 10^max_x_exponent, scientific = FALSE, digits = 2)  # Specify digits as 2
# Add custom x-axis tick labels
axis(side = 1, at = ticks, labels = labels, cex.axis = 5)
# Add x-axis label with exponent
mtext(expression('*10'^-4),side = 1,line = 6,at = max(density_data$x),col = "black",cex = 3)
# Add a vertical line at the maximum density value
max_density <- max(density_data$y)  # Get the maximum density value
segments(x0 = density_data$x[density_data$y == max_density], y0 = 0, x1 = density_data$x[density_data$y == max_density], y1 = max_density,lty = 2,col = "blue")
rm(list = ls())
library(ggplot2)
library(Metrics)
library(dplyr)
library(minpack.lm)
library(patchwork)
options(scipen = 10)
###########################################################################################################################
setwd("C:/Users/akc76/OneDrive - Cornell University/Desktop/HR/TECO_Dryland_HR/Teco_model_Aneesh/1_Output/withHR/DA")
paraest <- read.csv("Paraest.csv", skip = 20, header = F)
par(las = 1)
# Plot the probability density line graph with modified x-axis labels and increased axes gradients
par(mar = c(8, 20, 4, 7), mgp = c(3, 3, 0))
par(mfrow=c(1,1))
density_data <- density(paraest$V8)
plot(density_data,
type = "l",        # Specify line type
col = "blue",      # Line color
lwd = 2,           # Line width
xlab = "",    # Label for x-axis
ylab = "",  # Label for y-axis
main = "",
xaxs = "i",        # Set x-axis style to "internal"
yaxs = "i",        # Set y-axis style to "internal"
xlim = c(0, max(density_data$x)),  # Set limits for x-axis
ylim = c(0, max(density_data$y) + 100),  # Set limits for y-axis
xaxt = "n",        # Suppress x-axis tick labels
cex.axis = 5)      # Set size of axes gradients
title(ylab="Probability density", line=14, cex.lab=6)
# Calculate the exponent for x-axis labels
max_x <- max(density_data$x)
max_x_exponent <- floor(log10(max_x))
# Define the x-axis tick positions and labels
ticks <- seq(0, max_x, length.out = 4)
labels <- format(ticks / 10^max_x_exponent, scientific = FALSE, digits = 2)  # Specify digits as 2
# Add custom x-axis tick labels
axis(side = 1, at = ticks, labels = labels, cex.axis = 5)
# Add x-axis label with exponent
mtext(expression('*10'^-4),side = 1,line = 6,at = max(density_data$x),col = "black",cex = 3)
# Add a vertical line at the maximum density value
max_density <- max(density_data$y)  # Get the maximum density value
segments(x0 = density_data$x[density_data$y == max_density], y0 = 0, x1 = density_data$x[density_data$y == max_density], y1 = max_density,lty = 2,col = "blue")
max_density
max_x
max_density
hist(paraest$V8,          # Data to be plotted
breaks = 20,   # Number of bins
col = "skyblue",  # Color of bars
border = "black", # Border color of bars
xlab = "Value",   # Label for x-axis
ylab = "Frequency", # Label for y-axis
main = "Histogram of Random Data") # Title of the plot
setwd("C:/Users/akc76/OneDrive - Cornell University/Desktop/HR/TECO_Dryland_HR/Teco_model_Aneesh/1_Output/withHR/DA")
paraest <- read.csv("Paraest.csv", skip = 20, header = F)
par(las = 1)
# Plot the probability density line graph with modified x-axis labels and increased axes gradients
par(mar = c(8, 20, 4, 7), mgp = c(3, 3, 0))
par(mfrow=c(1,1))
density_data <- density(paraest$V8)
plot(density_data,
type = "l",        # Specify line type
col = "blue",      # Line color
lwd = 2,           # Line width
xlab = "",    # Label for x-axis
ylab = "",  # Label for y-axis
main = "",
xaxs = "i",        # Set x-axis style to "internal"
yaxs = "i",        # Set y-axis style to "internal"
xlim = c(0, max(density_data$x)),  # Set limits for x-axis
ylim = c(0, max(density_data$y) + 100),  # Set limits for y-axis
xaxt = "n",        # Suppress x-axis tick labels
cex.axis = 5)      # Set size of axes gradients
title(ylab="Probability density", line=14, cex.lab=6)
# Calculate the exponent for x-axis labels
max_x <- max(density_data$x)
max_x_exponent <- floor(log10(max_x))
# Define the x-axis tick positions and labels
ticks <- seq(0, max_x, length.out = 4)
labels <- format(ticks / 10^max_x_exponent, scientific = FALSE, digits = 2)  # Specify digits as 2
# Add custom x-axis tick labels
axis(side = 1, at = ticks, labels = labels, cex.axis = 5)
# Add x-axis label with exponent
mtext(expression('*10'^-4),side = 1,line = 6,at = max(density_data$x),col = "black",cex = 3)
# Add a vertical line at the maximum density value
max_density <- max(density_data$y)  # Get the maximum density value
segments(x0 = density_data$x[density_data$y == max_density], y0 = 0, x1 = density_data$x[density_data$y == max_density], y1 = max_density,lty = 2,col = "blue")
hist(paraest$V8,          # Data to be plotted
breaks = 20,   # Number of bins
col = "skyblue",  # Color of bars
border = "black", # Border color of bars
xlab = "Value",   # Label for x-axis
ylab = "Frequency", # Label for y-axis
main = "Histogram of Random Data") # Title of the plot
hist(paraest$V8,          # Data to be plotted
breaks = 20,   # Number of bins
col = "skyblue",  # Color of bars
border = "black", # Border color of bars
xlab = "",   # Label for x-axis
ylab = "Frequency", # Label for y-axis
main = "Histogram of Random Data") # Title of the plot
View(density_data)
